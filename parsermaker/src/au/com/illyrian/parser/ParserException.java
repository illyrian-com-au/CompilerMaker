/*
 * Created on 8/05/2008 by strongd
 *
 * Copyright (c) 2006 Department of Infrastructure (DOI)
 * State Government of Victoria, Australia
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of DOI.
 */

package au.com.illyrian.parser;

/**
 *
 * An exception generated by the BaseParser that describes a parse error.
 *
 * The input being parsed and the start and finish offsets of the errant token are included as properties of the
 * exception. The input string can be disected like this... <code>
 *   catch (ParserException ex) {
 *     // The input before the error has been parsed successfully.
 *     String preerror  = ex.getLine().substring(0, ex.getStart());
 *     // This is the errant token.
 *     String token     = ex.getLine().substring(ex.getStart(), ex.getFinish());
 *     // The input after the error has not been parsed yet.
 *     String posterror = ex.getLine().substring(ex.getFinish());
 *   }
 * </code>
 *
 * @author strongd
 */
public class ParserException extends Exception
{
    private static final long serialVersionUID = 185822962641368L;

    /** A description of the location of the error. */
    private String locationString;
    
    /** The line number of input. */
    private int lineNumber = 0;
    
    /** The source file. */
    private String sourceFilename;

    /**
     * Create an exception that describes the parsing error.
     *
     * @param message -
     *            the error message to display to the user.
     */
    public ParserException(String message)
    {
        super(message);
    }

    /**
     * Create an exception that describes the parsing error.
     *
     * @param message -
     *            the error message to display to the user.
     */
    public ParserException(String message, Exception ex)
    {
        super(message, ex);
    }

    /**
     * Set the status of the parser for Exceptions that are not generated by the parser.
     * @param input - the parser input container
     */
    public void setParserStatus(Input input)
    {
        this.locationString = input.toString();
        this.sourceFilename = input.getSourceFilename();
        this.lineNumber     = input.getLineNumber();
    }

    /**
     * The line number in the current source file.
     * 
     * @return the line number
     */
    public int getLineNumber()
    {
        return lineNumber;
    }
    
    /**
     * The current source file.
     * 
     * @return the source file being parsed
     */
    public String getSourceFilename()
    {
        return sourceFilename;
    }
    
    public String toString()
    {
        return locationString + "\n" + getMessage();
    }
}
