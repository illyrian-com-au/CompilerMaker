/*
 * Created on 8/05/2008 by strongd
 *
 * Copyright (c) 2006 Department of Infrastructure (DOI)
 * State Government of Victoria, Australia
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of DOI.
 */

package au.com.illyrian.parser;

/**
 *
 * An exception generated by the ExtendedSearchQueryParser that describes a parse error.
 *
 * The input being parsed and the start and finish offsets of the errant token are included as properties of the
 * exception. The input string can be disected like this... <code>
 *   catch (ExtendedSearchQueryParserException ex) {
 *     // The input before the error has been parsed successfully.
 *     preerror  = ex.getInput().substring(0, ex.getStart());
 *     // This is the errant token.
 *     token     = ex.getInput().substring(ex.getStart(), ex.getFinish());
 *     // The input after the error has not been parsed yet.
 *     posterror = ex.getInput().substring(ex.getFinish());
 *   }
 * </code>
 *
 * @author strongd
 */
public class ParserException extends Exception
{
    private static final long serialVersionUID = 185822962641368L;

    /** The line of input. */
    private String line;

    /** The start of the errant token */
    private int    start  = 0;

    /** Just past the end of the errant token. */
    private int    finish = 0;
    
    /** The line number of input. */
    private int lineNumber = 0;
    
    /** The source file. */
    private String sourceFilename;

    /**
     * Create an exception that describes the parsing error.
     *
     * @param message -
     *            the error message to display to the user.
     */
    public ParserException(String message)
    {
        super(message);
    }

    /**
     * Create an exception that describes the parsing error.
     *
     * @param message -
     *            the error message to display to the user.
     */
    public ParserException(String message, Exception ex)
    {
        super(message, ex);
    }

    /**
     * Set the status of the parser for Exceptions that are not generated by the parser.
     * @param input - the parser input container
     */
    public void setParserStatus(Input input)
    {
        this.line = input.getLine();
        this.start = input.getTokenStart();
        this.finish = input.getTokenFinish();
        this.sourceFilename = input.getSourceFilename();
        this.lineNumber = input.getLineNumber();
    }

    /**
     * Get the input string that was being parsed.
     *
     * @return the input text.
     */
    public String getLine()
    {
        return this.line;
    }

    /**
     * Get the start of the errant token.
     *
     * @return the offset to the start of the token.
     */
    public int getStart()
    {
        return this.start;
    }

    /**
     * Get the start of the errant token.
     *
     * @return the offset to the finish of the token.
     */
    public int getFinish()
    {
        return this.finish;
    }
    
    /**
     * The line number in the current source file.
     * 
     * @return the line number
     */
    public int getLineNumber()
    {
        return lineNumber;
    }
    
    /**
     * The current source file.
     * 
     * @return the source file being parsed
     */
    public String getSourceFilename()
    {
        return sourceFilename;
    }
    
//    private void pad(StringBuffer buf, int offset, char ch)
//    {
//        for (int i=0; i<offset; i++)
//            buf.append(ch);
//    }
    
    public String toString()
    {
        StringBuffer buf = new StringBuffer();
        if (getSourceFilename() != null && !"".equals(getSourceFilename()))
        {
            buf.append(getSourceFilename());
            buf.append(';');
            buf.append(getLineNumber());
            if (getStart() > 0)
            {
                buf.append(':');
                buf.append(getStart());
            }
            buf.append("\n");
        } else if (getLine() != null)
        {
            String line = getLine();
            buf.append(line.substring(0, getStart()));
            buf.append("$");
            buf.append(line.substring(getStart(), getFinish()));
            buf.append("$");
            buf.append(line.substring(getFinish()));
            buf.append("\nLine ");
            buf.append(getLineNumber());
            buf.append(": ");
        }
        buf.append(getMessage());
        return buf.toString();
    }
}
