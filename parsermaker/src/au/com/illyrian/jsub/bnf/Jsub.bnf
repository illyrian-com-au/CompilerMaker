package au.com.jesub;

import au.com.illyrian.Parser;
import au.com.illyrian.Precedence;
import au.com.illyrian.jesub.ast.*;
import au.com.illyrian.jesub.ast.AstStructureFactory;

public class JesubParser extends PrecidenceParser
{
    AstStructureFactory ast = new AstStructureFactory(this);

    enum AstToken {
    
        SEMI    (Lexer.DELIMITER, ';'),
        COMMA   (Lexer.DELIMITER, ','),

        DOT     (Lexer.OPERATOR, '.'),
        MULT    (Lexer.OPERATOR, '*'),
        DIV     (Lexer.OPERATOR, '/'),
        REM     (Lexer.OPERATOR, '%'),
        PLUS    (Lexer.OPERATOR, '+'),
        MINUS   (Lexer.OPERATOR, '-'),
        INC     (Lexer.OPERATOR, '++'),
        DEC     (Lexer.OPERATOR, '--'),
        NOT     (Lexer.OPERATOR, '!'),
        INV     (Lexer.OPERATOR, '~'),
        XOR     (Lexer.OPERATOR, '^'),
        SHL     (Lexer.OPERATOR, '<<'),
        SHR     (Lexer.OPERATOR, '>>'),
        USHR    (Lexer.OPERATOR, '>>>'),
        LT      (Lexer.OPERATOR, '<'),
        GT      (Lexer.OPERATOR, '>'),
        LE      (Lexer.OPERATOR, '<='),
        GE      (Lexer.OPERATOR, '<='),
        EQ      (Lexer.OPERATOR, '=='),
        NE      (Lexer.OPERATOR, '!='),
        AND     (Lexer.OPERATOR, '&'),
        OR      (Lexer.OPERATOR, '|'),
        ANDAND  (Lexer.OPERATOR, '&&'),
        OROR    (Lexer.OPERATOR, '||'),
        ASSIGN  (Lexer.OPERATOR, '='),
        
        BEGIN   (Lexer.OPEN_P, '{'),
        END     (Lexer.CLOSE_P, '}'),
        LPAR    (Lexer.OPEN_P, '('),
        RPAR    (Lexer.CLOSE_P, ')'),
        LBRA    (Lexer.OPEN_P, '['),
        RBRA    (Lexer.CLOSE_P, ']'),
        
        PACKAGE (Lexer.RESERVED, "package"),
        IMPORT  (Lexer.RESERVED, "import"),
        CLASS   (Lexer.RESERVED, "class"),
        INTERFACE(Lexer.RESERVED, "interface"),
        PUBLIC  (Lexer.RESERVED, "public"),
        PROTECTED(Lexer.RESERVED, "protected"),
        PRIVATE (Lexer.RESERVED, "private"),
        ABSTRACT(Lexer.RESERVED, "abstract"),
        FINAL   (Lexer.RESERVED, "final"),
        STRICTFP(Lexer.RESERVED, "strictfp"),
        EXTENDS (Lexer.RESERVED, "exends"),
        IMPLEMENTS(Lexer.RESERVED, "implements"),
        VOID    (Lexer.RESERVED, "void"),
        BOOLEAN (Lexer.RESERVED, "boolean"),
        BYTE    (Lexer.RESERVED, "byte"),
        CHAR    (Lexer.RESERVED, "char"),
        INT     (Lexer.RESERVED, "int"),
        LONG    (Lexer.RESERVED, "long"),
        FLOAT   (Lexer.RESERVED, "float"),
        DOUBLE  (Lexer.RESERVED, "double"),
        NEW     (Lexer.RESERVED, "new"),
        INSTANCEOF(Lexer.RESERVED, "instanceof"),
        THIS    (Lexer.RESERVED, "this"),
        SUPER   (Lexer.RESERVED, "super"),

        
        IDENTIFIER(Lexer.IDENTIFIER),
        STRING  (Lexer.STRING),
        INTEGER (Lexer.INTEGER),
        DECIMAL (Lexer.DECIMAL),
        CHARACTER(Lexer.CHARACTER);
    };
    
    precedence(int minPrecedence) ::= OperatorParser::{
        operator(DOT, 17, BINARY) =             { ast.Dot($1, $2) }
        bracket(LPAR, RPAR, 16, POSTFIX) =      { ast.Call($1, $2) }
        bracket(LBRA, RBRA, 16, POSTFIX) =      { ast.ArrayIndex($1, $2) }
        operator(DEC, 15, POSTFIX) =            { ast.PostDec($1) }
        operator(INC, 15, POSTFIX) =            { ast.PostInc($1) }
        operator(MINUS, 14, PREFIX) =           { ast.Neg($1) }
        operator(DEC, 14, PREFIX) =             { ast.Dec($1) }
        operator(INC, 14, PREFIX) =             { ast.Inc($1) }
        operator(PLUS, 14, PREFIX) =            { $1 }
        operator(INV, 14, PREFIX) =             { ast.Inv($1) }
        operator(NOT, 14, PREFIX) =             { ast.Not($1) }
        //bracket(LPAR, RPAR 13, PREFIX) =        { ast.Cast($1, $2) }
        //reserved(NEW, 13, PREFIX) =             { ast.New($1) } 
        operator(MULT, 12, BINARY) =            { ast.Mult($1, $2) }
        operator(DIV, 12, BINARY) =             { ast.Div($1, $2) }
        operator(REM, 12, BINARY) =             { ast.Rem($1, $2) }
        operator(PLUS, 11, BINARY) =            { ast.Add($1, $2) }
        operator(MINUS, 11, BINARY) =           { ast.Subt($1, $2) }
        operator(SHL, 10, BINARY) =             { ast.SHL($1, $2) }
        operator(SHR, 10, BINARY) =             { ast.SHR($1, $2) }
        operator(USHR, 10, BINARY) =            { ast.USHR($1, $2) }
        operator(LT, 9, BINARY) =               { ast.LT($1, $2) }
        operator(GT, 9, BINARY) =               { ast.GT($1, $2) }
        operator(LE, 9, BINARY) =               { ast.LE($1, $2) }
        operator(GE, 9, BINARY) =               { ast.GE($1, $2) }
        operator(EQ, 8, BINARY) =               { ast.EQ($1, $2) }
        operator(NE, 8, BINARY) =               { ast.NE($1, $2) }
        reserved(INSTANCEOF, 8, BINARY) =       { ast.InstanceOf($1, $2) }
        operator(AND, 7, BINARY) =              { ast.And($1, $2) }
        operator(XOR, 6, BINARY) =              { ast.Xor($1, $2) }
        operator(OR, 5, BINARY) =               { ast.Or($1, $2) }
        operator(ANDAND, 4, BINARY) =           { ast.AndThen($1, $2) }
        operator(OROR, 3, BINARY) =             { ast.OrElse($1, $2) }
        //operator("?", ":", 2, TERNARY) =        { ast.Cond($1, $2) }
        operator(ASSIGN, 1, BINARYR) =          { ast.Assign($1, $2) }
        operator(COMMA, 0, BINARY) =            { ast.Comma($1, $2) }
        }::OperatorParser;
    
    RecursiveParser::{
        
    goal ::= compilation_unit ;
    
    name ::= IDENTIFIER  { ast.Name($1) }
        ;
        
    qualified_name ::=
            name DOT qualified_name { ast.Dot($1, $3) }
        |   name    
        ;
        
    modifier_mult ::=
            modifier modifier_mult                { ast.Modifier($1, $2) }
        |   /*EMPTY*/
        ;
        
    modifier ::=
            PUBLIC | PROTECTED | PRIVATE | ABSTRACT | FINAL | STRICTFP 
        ;
    
    compilation_unit ::=
            package_opt import_mult class_plus  { ast.Module($1, $2, $3) }
        ;
            
    package_opt ::= 
            PACKAGE qualified_name SEMI { $2 }
        |   PACKAGE qualified_name error("IncompletePackageName")
        |   /*EMPTY*/ 
        |   recover(IMPORT, class_declaration)
        ;
    
    import_mult ::= 
            IMPORT import_path_plus import_mult  { ast.Seq($1, $2) }
        |   /*EMPTY*/
        |   recover(IMPORT, first(class_declaration))
        ;
        
    import_path_plus ::= 
            name DOT import_path_plus   { ast.Dot($1, $3) }
        |   name SEMICOLON              { $1 }
        |   MULT SEMICOLON              { ast.Name("*") }
        |   error("IncompleteImportPath")
        ;
        
    class_declaration_plus ::= 
            class_declaration class_declaration_plus    { ast.Seq($1, $2) }
        |   class_declaration
        ;
        
    class_declaration ::=
            modifier_mult CLASS simple_name extends_opt implements_opt class_body 
                                    { ast.DeclareClass($1, $3, $4, $5, $6) }
        |   modifier_mult INTERFACE simple_name extends_opt interface_body 
                                    { ast.DeclareInterface($1, $3, $4, $5) }
        |   error("ExpectedClassOrInterface") 
        ;
    
    extends_opt ::=
            EXTENDS qualified_name            {$2}
        |   /*EMPTY*/
        |   recover(IMPLEMENTS, BEGIN)
        ;
            
    
    implements_opt ::=
            IMPLEMENTS implements_plus  {$2}
        |   /*EMPTY*/
        |   recover(BEGIN)
        ;
    
    implements_plus ::=
            qualified_name COMMA implements_plus   { ast.Seq($1, $3) }
        |   qualified_name
        ;
    
    class_body ::=
            BEGIN member_mult END               { $2 }
        ;
        
    member_mult ::=
            member member_mult                  { ast.Seq($1, $2) }
        |   /*EMPTY*/
        |   recover(member)
        ;
        
    member ::=
            modifier_mult method_type name LPAR formal_mult RPAR method_body
                                        { ast.Method($1, $2, $3, $5, $7) }
        |   modifier_mult method_type name LPAR formal_mult RPAR SEMI
                                        { ast.Method($1, $2, $3, $5) }
        |   modifier_mult method_type name SEMI
                                        { ast.Declare($1, $2, $3) }
        ;
        
    method_type ::=
            type
        |   VOID                        { ast.Name("void") }
        ;
        
    type ::=
            class_type
        |   primitive_type              { ast.Name($1) }
        |   array_type
        ;
        
    primitive_type ::=
            BOOLEAN | BYTE | CHAR | SHORT | INT | LONG | FLOAT | DOUBLE ;
    
    array_type ::=
            type LBRAC RBRAC                    { ast.ArrayOf($1) }
    
    class_type ::= 
            qualified_name 
        ;
        
    formal_mult ::=
            modifier_mult type name             { ast.Declare($1, $2, $3) }
        ;
    
    method_body ::=
            compound_statement
        |   SEMICOLON
        ;
    
    compound_statement ::=
            BEGIN statement_mult END            { ast.Compound($2) }
        ;
    
    statement_mult ::=
            statement statement_mult            { ast.Seq($1, $2) }
        |   statement
        |   /*EMPTY*/
        ;
        
    statement ::=
            compound_statement
        |   if_else_statement
        |   while_statement
        |   for_statement
        |   try_statement
        |   break_statement
        |   continue_statement
        |   return_statement
        |   SEMI                               { null }
        |   expression_statement
        |   recover(SEMI)
        ;
    
    declare_label_opt ::=
            lookahead(IDENTIFIER, COLON) name COLON           { ast.Label($1) } 
    
    if_else_statement ::=
            IF LPAR expression RPAR statement else_opt        { ast.If($3, $5, $6) }
        ;
        
    else_opt ::=
            ELSE statement                                    { $2 }
        |   /*EMPTY*/
        ;
    
    while_statement ::=
            WHILE LPAR expression RPAR statement              { ast.While($3, $5) }
        ;
    
    for_statement ::=
            FOR LPAR expression_opt SEMI expression_opt SEMI expression_opt RPAR statement
                                { ast.For($3, $5, $7, $9) }
        ;
    
    try_statement ::= 
            TRY compound_statement catch_plus                 { ast.Try($2, $3) }
        ;
    
    catch_plus ::=
            catch_clause catch_plus                             { ast.Seq($1, $2) }
        |   catch_clause
        |   finally_clause
        ;
    
    catch_clause ::=
            CATCH LPAR class_type name RPAR compound_statement   
                                                                { ast.Catch($3, $4, $6) }
        ;
    
    finally_clause ::=
            FINALLY compound_statement                        { ast.Finally($2) }
    
    break_statement ::=
            BREAK label_opt SEMICOLON                         { ast.Break($2) }
        ;
    
    continue_statement ::=
            CONTINUE label_opt SEMICOLON                      { ast.Continue($2) }
        ;
    
    label_opt ::=
            IDENTIFIER                          { ast.Name($1) }
        |   /*EMPTY*/
        ;
    
    return_statement ::=
            RETURN expression_opt SEMICOLON   { ast.Return($2) }
        |   RETURN SEMICOLON                  { ast.Return() }
        ;
    
    expression_statement ::=
            expression SEMICOLON                { ast.Eval($1) }
        ;

    expression_opt ::=
            expression
        | /*EMPTY*/
        ;
        
    expression ::=                          
            precedence(0)
        ;

    actual_opt ::=                       
            precidence(-1)
        |   /*EMPTY*/
        ;
    
    }::RecursiveParser;
    
}
