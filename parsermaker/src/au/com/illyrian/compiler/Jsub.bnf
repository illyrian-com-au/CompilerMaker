package au.com.jesub;

import au.com.illyrian.Parser;
import au.com.illyrian.Precedence;
import au.com.illyrian.jesub.ast.*;
import au.com.illyrian.jesub.ast.AstStructureFactory;

public class JesubParser extends PrecidenceParser
{
    AstStructureFactory ast = new AstStructureFactory(this);

    Token::{
    
        DOT        ::= token(Lexer.DELIMITER, '.');
        SEMI       ::= token(Lexer.DELIMITER, ';');
        COMMA      ::= token(Lexer.DELIMITER, ',');
        MULT       ::= token(Lexer.OPERATOR, '*');
        
        BEGIN      ::= token(Lexer.OPEN_P, '{');
        END        ::= token(Lexer.CLOSE_P, '}');
        LPAR       ::= token(Lexer.OPEN_P, '(');
        RPAR       ::= token(Lexer.CLOSE_P, ')');
        
        PACKAGE    ::= token(Lexer.RESERVED, "package");
        IMPORT     ::= token(Lexer.RESERVED, "import");
        CLASS      ::= token(Lexer.RESERVED, "class");
        INTERFACE  ::= token(Lexer.RESERVED, "interface");
        PUBLIC     ::= token(Lexer.RESERVED, "public");
        PROTECTED  ::= token(Lexer.RESERVED, "protected");
        PRIVATE    ::= token(Lexer.RESERVED, "private");
        ABSTRACT   ::= token(Lexer.RESERVED, "abstract");
        FINAL      ::= token(Lexer.RESERVED, "final");
        STRICTFP   ::= token(Lexer.RESERVED, "strictfp");
        EXTENDS    ::= token(Lexer.RESERVED, "exends");
        IMPLEMENTS ::= token(Lexer.RESERVED, "implements");
        VOID       ::= token(Lexer.RESERVED, "void");
        BOOLEAN    ::= token(Lexer.RESERVED, "boolean");
        BYTE       ::= token(Lexer.RESERVED, "byte");
        CHAR       ::= token(Lexer.RESERVED, "char");
        INT        ::= token(Lexer.RESERVED, "int");
        LONG       ::= token(Lexer.RESERVED, "long");
        FLOAT      ::= token(Lexer.RESERVED, "float");
        DOUBLE     ::= token(Lexer.RESERVED, "double");

        
        IDENTIFIER ::= token(Lexer.IDENTIFIER) = { ast.Name(getLexer()) };
        STRING     ::= token(Lexer.STRING)     = { ast.String(getLexer()) };
        INTEGER    ::= token(Lexer.INTEGER)    = { ast.Integer(getLexer()) };
        DECIMAL    ::= token(Lexer.DECIMAL)    = { ast.Decimal(getLexer()) };
        CHARACTER  ::= token(Lexer.CHARACTER)  = { ast.Character(getLexer()) };
    }::Token;
    
    RecursiveParser::{
        
    goal ::= compilation_unit ;
    
    name ::= IDENTIFIER  { ast.Name($1) }
        ;
        
    qualified_name ::=
            name DOT qualified_name { ast.Dot($1, $3) }
        |   name    
        ;
        
    modifier_mult ::=
            modifier modifier_mult                { ast.Modifier($1, $2) }
        |   /*EMPTY*/
        ;
        
    modifier ::=
            PUBLIC | PROTECTED | PRIVATE | ABSTRACT | FINAL | STRICTFP 
        ;
    
    compilation_unit ::=
            package_opt import_mult class_plus  { ast.Module($1, $2, $3) }
        ;
            
    package_opt ::= 
            PACKAGE qualified_name SEMI { $2 }
        |   PACKAGE qualified_name error("IncompletePackageName")
        |   /*EMPTY*/ 
        |   recover(IMPORT, class_declaration)
        ;
    
    import_mult ::= 
            IMPORT import_path_plus import_mult  { ast.Seq($1, $2) }
        |   /*EMPTY*/
        |   recover(IMPORT, class_declaration)
        ;
        
    import_path_plus ::= 
            name DOT import_path_plus   { ast.Dot($1, $3) }
        |   name SEMICOLON              { $1 }
        |   MULT SEMICOLON              { ast.Name("*") }
        |   error("IncompleteImportPath")
        ;
        
    class_declaration_plus ::= 
            class_declaration class_declaration_plus    { ast.Seq($1, $2) }
        |   class_declaration
        ;
        
    class_declaration ::=
            modifier_mult CLASS simple_name extends_opt implements_opt class_body 
                                    { ast.DeclareClass($1, $3, $4, $5, $6) }
        |   modifier_mult INTERFACE simple_name extends_opt interface_body 
                                    { ast.DeclareInterface($1, $3, $4, $5) }
        |   error("ExpectedClassOrInterface") 
        ;
    
    extends_opt ::=
            EXTENDS qualified_name            {$2}
        |   /*EMPTY*/
        |   recover(IMPLEMENTS, BEGIN)
        ;
            
    
    implements_opt ::=
            IMPLEMENTS implements_plus  {$2}
        |   /*EMPTY*/
        |   recover(BEGIN)
        ;
    
    implements_plus ::=
            qualified_name COMMA implements_plus   { ast.Seq($1, $3) }
        |   qualified_name
        ;
    
    class_body ::=
            BEGIN member_mult END               { $2 }
        ;
        
    member_mult ::=
            member member_mult                  { ast.Seq($1, $2) }
        |   /*EMPTY*/
        |   recover(member)
        ;
        
    member ::=
            modifier_mult method_type name LPAR formal_mult RPAR method_body
                                        { ast.Method($1, $2, $3, $5, $7) }
        |   modifier_mult method_type name SEMI
                                        { ast.Declare($1, $2, $3) }
        ;
        
    method_type ::=
            type
        |   VOID                        { ast.Name("void") }
        ;
        
    type ::=
            class_type
        |   primitive_type              { ast.Name($1) }
        |   array_type
        ;
        
    primitive_type ::=
            BOOLEAN | BYTE | CHAR | SHORT | INT | LONG | FLOAT | DOUBLE ;
    
    array_type ::=
            type LBRAC RBRAC                    { ast.ArrayOf($1) }
    
    class_type ::= 
            qualified_name 
        ;
        
    formal_mult ::=
            modifier_mult type name             { new Declare($1, $2, $3) }
        ;
    
    method_body ::=
            compound_statement
        |   SEMICOLON
        ;
    
    compound_statement ::=
            BEGIN statement_mult END            { ast.Compound($2) }
        ;
    
    statement_mult ::=
            statement statement_mult            { ast.Seq($1, $2) }
        |   /*EMPTY*/
        ;
        
    statement ::=
            compound_statement
        |   if_else_statement
        |   while_statement
        |   for_statement
        |   try_statement
        |   break_statement
        |   continue_statement
        |   return_statement
        |   SEMICOLON                           { null }
        |   expression_statement
        |   recover(statement)
        ;
    
    declare_label_opt ::=
            lookahead(IDENTIFIER, COLON)
            name COLON                                          { ast.Label($1) } 
    
    if_else_statement ::=
            'if' LPAR expression RPAR statement else_opt        { ast.If($3, $5, $6) }
        ;
        
    else_opt ::=
            'else' statement                                    { $2 }
        |   /*EMPTY*/
        ;
    
    while_statement ::=
            'while' LPAR expression RPAR statement              { ast.While($3, $5) }
        ;
    
    for_statement ::=
            'for' LPAR expression_opt SEMICOLON expression_opt SEMICOLON expression_opt RPAR statement
                                { ast.For($3, $5, $7, $9) }
        ;
    
    try_statement ::= 
            'try' compound_statement catch_plus                 { ast.Try($1, $2) }
        ;
    
    catch_plus ::=
            catch_clause catch_plus                             { ast.Seq($1, $2) }
        |   catch_clause
        |   finally_clause
        ;
    
    catch_clause ::=
            'catch' LPAR class_type name RPAR compound_statement catch_mult   
                                                                { ast.Catch($3, $4, $6) }
        ;
    
    finally_clause ::=
            'finally' compound_statement                        { ast.Finally($2) }
    
    break_statement ::=
            'break' label_opt SEMICOLON                         { ast.Break($2) }
        ;
    
    continue_statement ::=
            'continue' label_opt SEMICOLON                      { ast.Continue($2) }
        ;
    
    label_opt ::=
            IDENTIFIER                          { ast.Name($1) }
        |   /*EMPTY*/
        ;
    
    return_statement ::=
            'return' expression_opt SEMICOLON   { ast.Return($2) }
        |   'return' SEMICOLON                  { ast.Return() }
        ;
    
    expression_statement ::=
            expression SEMICOLON                { ast.Eval($1) }
        ;

    expression_opt ::=
            expression
        | /*EMPTY*/
        ;
        
    expression ::=                          
            precedence(0)
        ;

    actual_opt ::=                       
            precidence(-1)
        |   /*EMPTY*/
        ;
    
    precedence(int minPrecedence) ::= OperatorParser::{
        operator(".", 17, BINARY) =             { ast.Dot($1, $2) }
        bracket("(", ")", 16, POSTFIX) =        { ast.Call($1, actual_opt) }
        bracket("[", "]", 16, POSTFIX) =        { ast.ArrayIndex($1, expression) }
        operator("--", 15, POSTFIX) =           { ast.PostDec($1) }
        operator("++", 15, POSTFIX) =           { ast.PostInc($1) }
        operator("-", 14, PREFIX) =             { ast.Neg($1) }
        operator("--", 14, PREFIX) =            { ast.Dec($1) }
        operator("++", 14, PREFIX) =            { ast.Inc($1) }
        operator("+", 14, PREFIX) =             { $1 }
        operator("~", 14, PREFIX) =             { ast.Inv($1) }
        operator("!", 14, PREFIX) =             { ast.Not($1) }
        bracket("(", ")" 13, PREFIX) =          { ast.Cast($1, $2) }
        reserved("new", 13, PREFIX) =           { ast.New($1) } 
        operator("*", 12, BINARY) =             { ast.Mult($1, $2) }
        operator("/", 12, BINARY) =             { ast.Div$1, $2) }
        operator("%", 12, BINARY) =             { ast.Rem($1, $2) }
        operator("+", 11, BINARY) =             { ast.Add($1, $2) }
        operator("-", 11, BINARY) =             { ast.Subt($1, $2) }
        operator("<<", 10, BINARY) =            { ast.SHL($1, $2) }
        operator(">>", 10, BINARY) =            { ast.SHR($1, $2) }
        operator(">>>", 10, BINARY) =           { ast.USHR($1, $2) }
        operator("<", 9, BINARY) =              { ast.LT($1, $2) }
        operator(">", 9, BINARY) =              { ast.GT($1, $2) }
        operator("<=", 9, BINARY) =             { ast.LE($1, $2) }
        operator(">=", 9, BINARY) =             { ast.GE($1, $2) }
        operator("==", 8, BINARY) =             { ast.EQ($1, $2) }
        operator("!=", 8, BINARY) =             { ast.NE($1, $2) }
        reserved("instanceof", 8, BINARY) =     { ast.InstanceOf($1, $2) }
        operator("&", 7, BINARY) =              { ast.And($1, $2) }
        operator("^", 6, BINARY) =              { ast.Xor($1, $2) }
        operator("|", 5, BINARY) =              { ast.Or($1, $2) }
        operator("=", 2, BINARYR) =             { ast.Assign($1, $2) }
        operator(",", -1, BINARY) =             { ast.Comma($1, $2) }
        }::OeratorParser;
    
    }::RecursiveParser;
}
