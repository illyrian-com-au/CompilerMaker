{        
    goal ::= compilation_unit ;
    
    name ::= IDENTIFIER  { ast.Name($1) }
        ;
        
    qualified_name ::=
            name DOT qualified_name { ast.Dot($1, $3) }
        |   name    
        ;
        
    modifier_mult ::=
            PUBLIC  modifier_mult            { ast.Modifier($1, $2) }
        |   PROTECTED  modifier_mult         { ast.Modifier($1, $2) }
        |   PRIVATE  modifier_mult           { ast.Modifier($1, $2) }
        |   ABSTRACT  modifier_mult          { ast.Modifier($1, $2) }
        |   FINAL  modifier_mult             { ast.Modifier($1, $2) }
        |   STRICTFP  modifier_mult          { ast.Modifier($1, $2) }
        |   /*EMPTY*/ 
        ;
    
    compilation_unit ::=
            package_opt import_mult class_declaration_plus { ast.Module($1, $2, $3) }
        ;
            
    package_opt ::= 
            PACKAGE qualified_name SEMI { $2 }
        |   PACKAGE error("IncompletePackageName")
        |   /*EMPTY*/ 
        |   recover(IMPORT, class_declaration)
        ;
    
    import_mult ::= 
            IMPORT import_path_plus import_mult  { ast.Seq($2, $3) }
        |   /*EMPTY*/
        |   recover(IMPORT, class_declaration)
        ;
        
    import_path_plus ::= 
            name DOT import_path_plus            { ast.Dot($1, $3) }
        |   name SEMI                            { $1 }
        |   MULT SEMI                            { ast.Name("*") }
        |   error("IncompleteImportPath")
        ;
        
    class_declaration_plus ::= 
            class_declaration class_declaration_plus    { ast.Seq($1, $2) }
        |   class_declaration
        ;
        
    class_declaration ::=
            modifier_mult CLASS name extends_opt implements_opt class_body 
                                    { ast.DeclareClass($1, $3, $4, $5, $6) }
        |   modifier_mult INTERFACE name extends_opt class_body 
                                    { ast.DeclareInterface($1, $3, $4, $5) }
        |   error("ExpectedClassOrInterface") 
        ;
    
    extends_opt ::=
            EXTENDS qualified_name            {$2}
        |   EXTENDS error("ExpectedExtendedClassName")
        |   /*EMPTY*/
        |   recover(IMPLEMENTS, BEGIN)
        ;
            
    
    implements_opt ::=
            IMPLEMENTS implements_plus  {$2}
        |   IMPLEMENTS error("ExpectedImplementedInterfaceName")
        |   /*EMPTY*/
        |   recover(BEGIN)
        ;
    
    implements_plus ::=
            qualified_name COMMA implements_plus   { ast.Seq($1, $3) }
        |   qualified_name
        ;
    
    class_body ::=
            BEGIN member_mult END               { $2 }
        ;
        
    member_mult ::=
            member member_mult                  { ast.Seq($1, $2) }
        |   /*EMPTY*/
        |   recover(member)
        ;
        
    member ::=
            modifier_mult method_type name LPAR formal_mult RPAR method_body
                                        { ast.Method($1, $2, $3, $5, $7) }
        |   modifier_mult method_type name SEMI
                                        { ast.Declare($1, $2, $3) }
        ;
        
    method_type ::=
            type
        |   VOID                        { ast.Name("void") }
        ;
        
    type ::=
            class_type
        |   class_type LBRAC RBRAC      { ast.ArrayOf($1) }
        |   primitive_type              { ast.Name($1) }
        |   primitive_type LBRAC RBRAC  { ast.ArrayOf($1) }
        ;
        
    primitive_type ::=
            BOOLEAN             { ast.Name("boolean") }
        |   BYTE                { ast.Name("byte") }
        |   CHAR                { ast.Name("char") }
        |   SHORT               { ast.Name("short") }
        |   INT                 { ast.Name("int") }
        |   LONG                { ast.Name("long") }
        |   FLOAT               { ast.Name("float") }
        |   DOUBLE              { ast.Name("double") }
        ;
    
    class_type ::= 
            qualified_name 
        ;
        
    formal_mult ::=
            modifier_mult type name             { ast.Declare($1, $2, $3) }
        ;
    
    method_body ::=
            compound_statement
        |   SEMI
        ;
    
    compound_statement ::=
            BEGIN statement_mult END            { ast.Compound($2) }
        ;
    
    statement_mult ::=
            statement statement_mult            { ast.Seq($1, $2) }
        |   /*EMPTY*/
        ;
        
    statement ::=
            compound_statement
        |   if_else_statement
        |   try_statement
        |   break_statement
        |   continue_statement
        |   return_statement
        |   declare_label_opt labeled_statement  { $2 }
        |   SEMI                                 { null }
        |   declare_statement
        |   expression_statement
        |   recover(statement)
        ;
    
    labeled_statement ::=
            while_statement
        |   for_statement
        ;
    
    declare_label_opt ::=
            lookahead(IDENTIFIER, COLON) name COLON             { ast.Label($1) } 
        |   /*EMPTY*/
        ;
    
    if_else_statement ::=
            IF LPAR expression RPAR statement else_opt        { ast.If($3, $5, $6) }
        ;
        
    else_opt ::=
            ELSE statement                                    { $2 }
        |   /*EMPTY*/
        ;
    
    while_statement ::=
            WHILE LPAR expression RPAR statement  { ast.While($4, $6, $1) }
        ;
    
    for_statement ::=
            FOR LPAR expression_opt SEMI expression_opt SEMI expression_opt RPAR statement
                                { ast.For($4, $6, $8, $10, $1) }
        ;
    
    try_statement ::= 
            TRY compound_statement catch_plus                 { ast.Try($1, $2) }
        ;
    
    catch_plus ::=
            catch_clause catch_plus                             { ast.Seq($1, $2) }
        |   catch_clause
        |   finally_clause
        ;
    
    catch_clause ::=
            CATCH LPAR class_type name RPAR compound_statement  
                                                                { ast.Catch($3, $4, $6) }
        ;
    
    finally_clause ::=
            FINALLY compound_statement                        { ast.Finally($2) }
        ;
    
    break_statement ::=
            BREAK label_opt SEMI                         { ast.Break($2) }
        ;
    
    continue_statement ::=
            CONTINUE label_opt SEMI                      { ast.Continue($2) }
        ;
    
    label_opt ::=
            IDENTIFIER                          { ast.Name($1) }
        |   /*EMPTY*/
        ;
    
    return_statement ::=
            RETURN expression_opt SEMI   { ast.Return($2) }
        ;
    
    declare_statement ::=
            modifier_mult type name SEMI   { ast.Declare($1, $2, $3) }
        ;

    expression_statement ::=
            expression SEMI                { ast.Eval($1) }
        ;

    expression_opt ::=
            expression
        | /*EMPTY*/
        ;
        
    expression ::=                          
            precedence(1) 
        ;

    actual_opt ::=                       
            precedence(0)
        |   /*EMPTY*/
        ;

    /* This is a line comment */
    // This is also a line comment
    /* This is a
     * multi-line comment
     */
}